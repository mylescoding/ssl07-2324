def helper_function(phase,diksyonaryo):
    global past_phase
    phase = phase.partition(" - ")[0]
    #Mid Katipunan to Top Katipunan
    K2N_K.car_num = diksyonaryo["katip_t_nb_0_count"]
    K2N_K.car_num += diksyonaryo["katip_t_nb_1_count"]
    K2N_K.car_num += diksyonaryo["katip_t_nb_2_count"]
    # Mid Katipunan to Thornton
    K2N_TDrive.car_num += diksyonaryo["katip_t_nb_3_count"]
    #Top Katipunan to Mid Katipunan
    K_K2S.car_num = diksyonaryo["katip_t_sb_0_count"]
    K_K2S.car_num += diksyonaryo["katip_t_sb_1_count"]
    K_K2S.car_num += diksyonaryo["katip_t_sb_2_count"]
    K_K2S.car_num += diksyonaryo["katip_t_sb_3_count"]
    # Top Katipunan U-turn
    K_Uturn.car_num += diksyonaryo["katip_t_sb_4_count"]
    # Thornton Drive (Divide divide)
    divide_thornton = int(diksyonaryo["thornton-drive-lower-out_0_count"] / 2)
    mod = diksyonaryo["thornton-drive-lower-out_0_count"] % 2
    TDrive_K.car_num = divide_thornton
    TDrive_K2S.car_num = divide_thornton
    random_number = random.randint(1, 2)
    if random_number == 1:
        TDrive_K.car_num += mod
    else:
        TDrive_K2S.car_num  += mod
    #From Mid Katipunan to Thornton Drive
    K2N_TDrive.car_num += diksyonaryo["thornton-drive-in_0_count"]
    K2N_TDrive.car_num += diksyonaryo["katip_m_u_nb_0_count"]
    #From Mid Katipunan Upper to Top Katipunan  $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
    K2N_TDrive.car_num += diksyonaryo["katip_m_u_nb_1_count"]
    K2N_TDrive.car_num += diksyonaryo["katip_m_u_nb_2_count"]
    K2N_TDrive.car_num += diksyonaryo["katip_m_u_nb_3_count"]
    # From Mid Katipunan Lower to Top Katipunan $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
    K2N_TDrive.car_num += diksyonaryo["katip_m_l_nb_0_count"]
    K2N_TDrive.car_num += diksyonaryo["katip_m_l_nb_1_count"]
    K2N_TDrive.car_num += diksyonaryo["katip_m_l_nb_2_count"]
    #B.Gonzales to Mid Katipunan
    Gonza_K2S.car_num +=diksyonaryo["b.gonzales-road_0_count"]
####B. Gonzales Divide2x
    divide_gonza = int(diksyonaryo["b.gonzales-road_1_count"] / 2)
    mod = diksyonaryo["b.gonzales-road_1_count"] % 2
    TDrive_K.car_num = divide_gonza
    TDrive_K2S.car_num = divide_gonza
    random_number = random.randint(1, 7)
    if random_number == 1:
        # B.Gonzales to Top Katipunan
        Gonza_K2S.car_num += mod
    else:
        # B.Gonzales to Thornton Drive
        Gonza_TDrive.car_num += mod
    # From Mid Katipunan to Bottom Katipunan
    K2S_K3.car_num += diksyonaryo["katip_m_sb_0_count"]
    K2S_K3.car_num += diksyonaryo["katip_m_sb_1_count"]
    K2S_K3.car_num += diksyonaryo["katip_m_sb_2_count"]
    # From Mid Katipunan to University Drive
    K2S_URd.car_num +=diksyonaryo["katip_m_sb_3_count"]
    # From Mid Katipunan U-turn
    K2S_K2N.car_num+= diksyonaryo["katip_m_sb_4_count"]#
########University Road Upper Out Divide2x
    divide_urduo = int(diksyonaryo["univ-road-upper-out_0_count"] / 2)
    mod = diksyonaryo["univ-road-upper-out_0_count"] % 2
    URd_K2N.car_num = divide_urduo
    URd_K3.car_num = divide_urduo
    random_number = random.randint(1, 2)
    if random_number == 1:
        # University Road Upper Out to Mid Katipunan
        URd_K2N.car_num += mod
    else:
        # University Road Upper Out to Bottom Katipunan
        URd_K3.car_num  += mod
    # University Road Lower Out
    URd_K3.car_num= diksyonaryo["univ-road-lower-out_0_count"]
    # F.delaRosa to Mid Katip
    FDRosa_K2N.car_num += diksyonaryo["f.dela-rosa-road_1_count"]
######## F.delaRosa Divide2x
    divide_frosa = int(diksyonaryo["f.dela-rosa-road_0_count"] / 2)
    mod = diksyonaryo["f.dela-rosa-road_0_count"] % 2
    FDRosa_URd.car_num += divide_frosa
    FDRosa_K3.car_num += divide_frosa
    random_number = random.randint(1, 7)
    if random_number == 1:
        # F.delaRosa to University Road
        FDRosa_URd.car_num += mod
    else:
        # F.delaRosa to Bottom Katipunan
        FDRosa_K3.car_num += mod
    #did not include these v since exit node
    #'katip_b_sb_0_count': 4, 'katip_b_sb_1_count': 3, 'katip_b_sb_2_count': 7, 'katip_b_sb_3_count': 0, 'katip_b_sb_4_count': 0,

    # Bottom Katipunan to Mid Katipunan
    K3_K2N.car_num += diksyonaryo["katip_b_nb_1_count"]
    K3_K2N.car_num += diksyonaryo["katip_b_nb_2_count"]
    # Bottom Katipunan to Urd
    K3_URd.car_num += diksyonaryo["katip_b_nb_0_count"]
    Unassert()  # This happens only once
    x = int(15) #This is the minimum green time
    Save_Original_State()
    if phase == "phase 1":
        Phase_1()
        print(f"THIS IS P1")
        for i in range(len(Roads)):
            if Roads[i].busy == 1: 
                print(f"Number of cars in", Roads[i].name, ":", Roads[i].car_num)
        if (past_phases[1] == 15 and past_phases[2] == 15 and past_phases[3] == 15):
            return int(160)
        if (K_K2S.car_num < 12 and K2N_K.car_num < 12 and K2N_TDrive.car_num < 12 and K2S_K3.car_num < 12 and K3_K2N.car_num < 12 and K3_URd.car_num < 12):
            past_phase[0] = x
            return x
        past_phase[0] = optimization_loop(3)
        return past_phase[0]
    elif phase =="phase 2":
        Phase_2()
        print("THIS IS P2")
        for i in range(len(Roads)):
            if Roads[i].busy == 1: 
                print(f"Number of cars in", Roads[i].name, ":", Roads[i].car_num)
        if (past_phases[0] == 15 and past_phases[2] == 15 and past_phases[3] == 15):
            return int(70)
        if (Gonza_K.car_num < 12) and (Gonza_K2S.car_num < 12) and (URd_K3.car_num < 12) and (FDRosa_K2N.car_num < 12) and (FDRosa_K3.car_num < 12) and (FDRosa_URd.car_num < 12):
            past_phase[1] = x            
            return x
        past_phase[1] = optimization_loop(3)
        return past_phase[1]
    elif phase == "phase 3":
        Phase_3()
        print("THIS IS P3")
        for i in range(len(Roads)):
            if Roads[i].busy == 1: 
                print(f"Number of cars in", Roads[i].name, ":", Roads[i].car_num)
        if (past_phases[0] == 15 and past_phases[1] == 15 and past_phases[3] == 15):
            return int(75)
        if (K_Uturn.car_num < 12 and TDrive_K2S.car_num < 12 and TDrive_K.car_num < 12 and URd_K3.car_num < 12 and URd_K2N.car_num < 12):
            past_phase[2] = x
            return x
        past_phase[2] = optimization_loop(3)
        return past_phase[2]
    elif phase == "phase 4":
        Phase_4()
        print("THIS IS P4")
        for i in range(len(Roads)):
            if Roads[i].busy == 1: 
                print(f"Number of cars in", Roads[i].name, ":", Roads[i].car_num)
        if (past_phases[0] == 15 and past_phases[1] == 15 and past_phases[2] == 15):
            return int(160)
        if (K_Uturn.car_num < 12 and K_K2S.car_num < 12 and K_TDrive.car_num < 12 and K2S_URd.car_num < 12 and K2S_K2N.car_num < 12 and K2S_K3.car_num < 12):
            past_phase[3] = x
            return x
        past_phase[3] = optimization_loop(3)
        return past_phase[3]
     

car_num_list = []
past_phase = [0,0,0,0]